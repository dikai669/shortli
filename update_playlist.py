import requests
import re

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ M3U –ø–ª–µ–π–ª–∏—Å—Ç–∞
def parse_m3u(url):
    """–ü–∞—Ä—Å–∏—Ç M3U —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø."""
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç —Å URL: {url}")
    
    lines = response.text.splitlines()
    groups = {}
    current_group = None
    group_content = []

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É EXTINF –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
    for line in lines:
        if line.startswith("#EXTINF"):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Ç–µ–≥–∞ EXTGRP
            match = re.search(r'group-title="([^"]+)"', line)
            if match:
                group_name = match.group(1).strip()
                if group_name != current_group:
                    if current_group and group_content:
                        groups[current_group] = group_content
                    current_group = group_name
                    group_content = []
            group_content.append(line)
        elif line.startswith("#EXTVLCOPT") or line.startswith("http"):
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å EXTVLCOPT –∏ —Å—Å—ã–ª–∫–∏
            group_content.append(line)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
    if current_group and group_content:
        groups[current_group] = group_content

    return groups


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
def extract_metadata(url):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞."""
    response = requests.get(url)
    if response.status_code != 200:
        raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç —Å URL: {url}")
    
    lines = response.text.splitlines()
    metadata_lines = []

    for line in lines:
        if line.startswith("#EXTM3U") or line.startswith("#---"):
            metadata_lines.append(line)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏

    return metadata_lines


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–∞
def update_playlist(source_urls, target_url, output_file, special_group=None, special_source=None):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–ª–µ–≤–æ–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤."""
    target_groups = parse_m3u(target_url)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞
    source_groups = parse_m3u(source_urls[0])
    for group, channels in source_groups.items():
        if group in target_groups:
            print(f"–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–∞: {group} –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞")
            target_groups[group] = channels  # –ó–∞–º–µ–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≥—Ä—É–ø–ø—ã
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –≥—Ä—É–ø–ø—É –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞
    if special_group and special_source:
        special_source_groups = parse_m3u(special_source)
        if special_group in special_source_groups:
            print(f"–û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≥—Ä—É–ø–ø–∞: {special_group} –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞")
            target_groups[special_group] = special_source_groups[special_group]
        else:
            print(f"–ì—Ä—É–ø–ø–∞ '{special_group}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ –≤—Ç–æ—Ä–æ–º –∏—Å—Ö–æ–¥–Ω–∏–∫–µ")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    metadata_lines = extract_metadata(target_url)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
    with open(output_file, "w", encoding="utf-8") as f:
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        for metadata_line in metadata_lines:
            f.write(f"{metadata_line}\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã
        for group, channels in target_groups.items():
            for channel in channels:
                f.write(f"{channel}\n")
    
    print(f"–ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {output_file}!")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    # URL –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
    source_url_1 = "https://raw.githubusercontent.com/IPTVSHARED/iptv/refs/heads/main/IPTV_SHARED.m3u"
    source_url_2 = "https://raw.githubusercontent.com/Dimonovich/TV/Dimonovich/FREE/TV"
    target_url = "https://raw.githubusercontent.com/dikai669/playlist/refs/heads/main/mpll.m3u"
    output_file = "mpll.m3u"

    # –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞
    special_group = "Lime (VPN üá∑üá∫)"

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π–ª–∏—Å—Ç
    try:
        update_playlist(
            source_urls=[source_url_1, source_url_2],
            target_url=target_url,
            output_file=output_file,
            special_group=special_group,
            special_source=source_url_2
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
